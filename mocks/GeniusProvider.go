// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	internal "github.com/marosiak/WordFinder/internal"
	mock "github.com/stretchr/testify/mock"
)

// GeniusProvider is an autogenerated mock type for the GeniusProvider type
type GeniusProvider struct {
	mock.Mock
}

// GetArtist provides a mock function with given fields: artistName
func (_m *GeniusProvider) GetArtist(artistName string) (internal.GeniusArtist, error) {
	ret := _m.Called(artistName)

	var r0 internal.GeniusArtist
	if rf, ok := ret.Get(0).(func(string) internal.GeniusArtist); ok {
		r0 = rf(artistName)
	} else {
		r0 = ret.Get(0).(internal.GeniusArtist)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(artistName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSongByID provides a mock function with given fields: id
func (_m *GeniusProvider) GetSongByID(id int) (internal.GeniusSong, error) {
	ret := _m.Called(id)

	var r0 internal.GeniusSong
	if rf, ok := ret.Get(0).(func(int) internal.GeniusSong); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(internal.GeniusSong)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSongByName provides a mock function with given fields: name
func (_m *GeniusProvider) GetSongByName(name string) (internal.GeniusSong, error) {
	ret := _m.Called(name)

	var r0 internal.GeniusSong
	if rf, ok := ret.Get(0).(func(string) internal.GeniusSong); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(internal.GeniusSong)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSongInfoByID provides a mock function with given fields: id
func (_m *GeniusProvider) GetSongInfoByID(id int) (internal.GeniusSongInfo, error) {
	ret := _m.Called(id)

	var r0 internal.GeniusSongInfo
	if rf, ok := ret.Get(0).(func(int) internal.GeniusSongInfo); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(internal.GeniusSongInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSongInfosByArtistID provides a mock function with given fields: artistID
func (_m *GeniusProvider) GetSongInfosByArtistID(artistID int) ([]internal.GeniusSongInfo, error) {
	ret := _m.Called(artistID)

	var r0 []internal.GeniusSongInfo
	if rf, ok := ret.Get(0).(func(int) []internal.GeniusSongInfo); ok {
		r0 = rf(artistID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.GeniusSongInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(artistID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSongsByArtistID provides a mock function with given fields: artistID
func (_m *GeniusProvider) GetSongsByArtistID(artistID int) ([]internal.GeniusSong, error) {
	ret := _m.Called(artistID)

	var r0 []internal.GeniusSong
	if rf, ok := ret.Get(0).(func(int) []internal.GeniusSong); ok {
		r0 = rf(artistID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.GeniusSong)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(artistID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSongsByIDs provides a mock function with given fields: id
func (_m *GeniusProvider) GetSongsByIDs(id []int) ([]internal.GeniusSong, error) {
	ret := _m.Called(id)

	var r0 []internal.GeniusSong
	if rf, ok := ret.Get(0).(func([]int) []internal.GeniusSong); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.GeniusSong)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: query
func (_m *GeniusProvider) Search(query string) ([]internal.GeniusSearchResult, error) {
	ret := _m.Called(query)

	var r0 []internal.GeniusSearchResult
	if rf, ok := ret.Get(0).(func(string) []internal.GeniusSearchResult); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.GeniusSearchResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
